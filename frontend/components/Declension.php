<?php

namespace frontend\components;

use Yii;

class Declension {

	public static function horizontalImage($filename)
	{
		$dimensions = getimagesize($filename);
		$width = $dimensions[0];
		$height = $dimensions[1];

		return ($height > $width) ? false : true;
	}

	public static function clearPhone($phone)
	{
		return str_replace(['(',')','+',' ','-'], '', $phone);
	}
	
	public static function end_restaurants($num) {
		$ost=$num%10;
		$ost100 = $num%100;
		if (($ost100<10 || $ost100>20) && $ost!=0) {
			switch ($ost) {
				case 1:	$end='';	break;
				case 2:
				case 3:
				case 4: $end='а'; break;
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:	$end='ов'; break;
			}
		} else $end='ов';
		return $end;
	}

	public static function end_rooms($num) {
		$ost=$num%10;
		$ost100 = $num%100;
		if (($ost100<10 || $ost100>20) && $ost!=0) {
			switch ($ost) {
				case 1:	$end='';	break;
				case 2:
				case 3:
				case 4: $end='а'; break;
				case 5:
				case 6:
				case 7:
				case 8:
				case 9:	$end='ов'; break;
			}
		} else $end='ов';
		return $end;
	}

	/**
     * Функция возвращает окончание для множественного числа слова на основании числа и массива окончаний
     * @param  $number Integer Число на основе которого нужно сформировать окончание
     * @param  $endingsArray  Array Массив слов или окончаний для чисел (1, 4, 5),
     *         например array('яблоко', 'яблока', 'яблок')
     * @return String
     */
    public static function get_num_ending($number, $endingArray)
    {
        $number = $number % 100;
        if ($number>=11 && $number<=19) {
            $ending=$endingArray[2];
        } else {
            $i = $number % 10;
            switch ($i)
            {
                case (1): $ending = $endingArray[0]; break;
                case (2):
                case (3):
                case (4): $ending = $endingArray[1]; break;
                default: $ending=$endingArray[2];
            }
        }
        return $ending;
    }

	public static function get($count, $part, $withCount = false)
	{
		$parts = [
			'шат' => ['ер','ра','ров'],
			'зал' => ['','а','ов'],
			'площад' => ['ка','ки','ок'],
			'площ' => ['адку','адки','адок'],
			'отел' => ['ь','я','ей'],
			'лофт' => ['','а','ов'],
			'баз' => ['а','ы',''],
			'саун' => ['а','ы',''],
			'бан' => ['я','и','ь'],
			'бар' => ['','а','ов'],
			'луч' => ['ший бар','ших бара','ших баров'],
			'веранд' => ['а','ы',''],
			'террас' => ['а','ы',''],
			'коттедж' => ['','а','ей'],
			'ресторан' => ['','а','ов'],
			'нед' => ['орогой ресторан','орогих ресторана','орогих ресторанов'],
			'кафе' => ['','',''],
			'недор' => ['огое кафе','огих кафе','огих кафе'],
			'мест' => ['о', 'а', ''],
			'детск' => ['ая площадка', 'их площадки', 'их площадок'],
			'Найден' => ['а', 'о', 'о'],
			'банкетны' => ['й зал', 'х зала', 'х залов'],
			'гостиниц' => ['а', 'ы', ''],
			'клуб' => ['', 'а', 'ов'],
			'предложен' => ['ие', 'ия', 'ий'],
		];
		if(empty($parts[$part])) {
			return ($withCount ? $count . ' ' : '') . 'мест' . self::get_num_ending($count, $parts['мест']);
		}
		return ($withCount ? $count . ' ' : '') . $part . self::get_num_ending($count, $parts[$part]);
	}

    public static function csrfToken(){
    	return Yii::$app->request->getCsrfToken();
    }

    /**
     * Функция возвращает ссылку на изображение, подменяя no_image на картинку ДР
     * @param  $img_src String Ссылка на изображение
     * @return String
     */
    public static function get_image_src($img_src)
    {
        return strrpos($img_src, 'no_photo.png') === false ? $img_src : '/img/no_photo_cover.png';
    }

	public static function dateWithRusMonth($unixstamp)
    {
        $d = date("j", $unixstamp);
        $m = date("m", $unixstamp);
        $y = date("Y", $unixstamp);
        $months = [
            '01' => 'января',
            '02' => 'февраля',
            '03' => 'марта',
            '04' => 'апреля',
            '05' => 'мая',
            '06' => 'июня',
            '07' => 'июля',
            '08' => 'августа',
            '09' => 'сентября',
            '10' => 'октября',
            '11' => 'ноября',
            '12' => 'декабря'
        ];
        return $d . ' ' . (isset($months[$m]) ? $months[$m] : '') . ' ' . $y;
    }

	//  public static function getAreaCity($part)
	 public static function getAreaCity($city)
	{
		// $parts = [
		$areas = [
			'Москве' => 'Подмосковье',
			'Санкт-Петербурге' => 'Ленинградской области',
			'Екатеринбурге' => 'Свердловской области',
			'Новосибирске' => 'Новосибирской области',
			'Нижнем Новгороде' => 'Нижегородской области',
			'Казани' => 'Казанской области',
			'Краснодаре' => 'Краснодарском крае',
			'Самаре' => 'Самарской области',
			'Ростове-на-Дону' => 'Ростовской области',
			'Воронеже' => 'Воронежской области',
			'Уфе' => 'Уфимской области',
			'Перми' => 'Пермская области',
			'Челябинске' => 'Челябинской области',
			'Иркутске' => 'Иркутской области',
			'Омске' => 'Омской области',
			'Тюмени' => 'Тюменской области',
			'Сочи' => 'Краснодарском крае',
			'Волгограде' => 'Волгоградской области',
			'Оренбурге' => 'Оренбургской области',
			'Барнауле' => 'Алтайском крае',
			'Хабаровске' => 'Хабаровском крае',
			'Туле' => 'Тульской области',
			'Ставрополе' => 'Ставропольском крае',
			'Тольятти' => 'Самарской области',
			'Томске' => 'Томской области',
			'Калининграде' => 'Калининградской области',
			'Владивостоке' => 'Приморском крае',
			'Ярославле' => 'Ярославской области',
			'Белгороде' => 'Белгородской области',
			'Ульяновске' => 'Ульяновской области',
			'Чебоксарах' => 'Чувашской Республике',
			'Твери' => 'Тверской области',
			'Ижевске' => 'Удмуртской Республике',
			'Астрахани' => 'Астраханской области',
			'Липецке' => 'Липецкой области',
			'Кемерово' => 'Кемеровской области',
			'Кирове' => 'Кировской области',
			'Пензе' => 'Пензенской области',
			'Иваново' => 'Ивановской области',
			'Рязани' => 'Рязанской области',
			'Брянске' => 'Брянской области',
			'Калуге' => 'Калужской области',
			'Архангельске' => 'Архангельской области',
			'Севастополе' => 'Южном федеральном округе',
			'Сургуте' => 'Тюменской области',
			'Смоленске' => 'Смоленской области',
			'Набережных Челнах' => 'Республике Татарстан',
			'Костроме' => 'Костромской области',
			'Магнитогорске' => 'Челябинской области',
			'Тамбове' => 'Тамбовской области',
			'Курске' => 'Курской области',
			'Симферополе' => 'Республике Крым',
			'Владимире' => 'Владимирской области',
			'Таганроге' => 'Ростовской области',
			'Бийске' => 'Алтайском крае',
			'Орле' => 'Орловской области',
			'Новороссийске' => 'Краснодарском крае',
		];
		// if(empty($parts[$part])) {
		if(empty($areas[$city])) {
			// return ($withCount ? $count . ' ' : '') . 'мест' . self::get_num_ending($count, $parts['мест']);
			return $areas['Москве'];
		}
		return $areas[$city];;
	}
}